# configmap for Locust
apiVersion: v1
kind: ConfigMap
metadata:
  name: scripts-cm
data:
  locustfile.py: |
    import json
    import random
    from locust import HttpUser, task, between
    # from locust.exception import RescheduleTask

    class SaleorGraphQLUser(HttpUser):
        wait_time = between(1, 2)
        
        def on_start(self):
            """Initialize user session"""
            self.headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Connection': 'close',
            }
            self.checkout_id = None
            self.product_ids = []
            
            self.get_products()
        
        def graphql_request(self, query, variables=None, name=None):
            """Helper method to make GraphQL requests"""
            payload = {
                'query': query,
                'variables': variables or {}
            }
            
            headers = self.headers.copy()
            
            with self.client.post(
                '/graphql/',
                json=payload,
                headers=headers,
                name=name or query[:50] + '...',
                catch_response=True
            ) as response:
                try:
                    result = response.json()
                    if 'errors' in result:
                        response.failure(f"GraphQL errors: {result['errors']}")
                        return None
                    return result.get('data')
                except json.JSONDecodeError:
                    response.failure("Invalid JSON response")
                    return None
        
        def get_products(self):
            """Fetch product IDs for use in other tests"""
            query = """
            query GetProducts($first: Int!, $channel: String!) {
                products(first: $first, channel: $channel) {
                    edges {
                        node {
                            id
                            name
                            slug
                        }
                    }
                }
            }
            """
            variables = {'first': 20, 'channel': 'default-channel'}
            
            data = self.graphql_request(query, variables, name="Get Products for Setup")
            if data and data.get('products', {}).get('edges'):
                self.product_ids = [
                    edge['node']['id'] 
                    for edge in data['products']['edges']
                ]
        
        @task(3)
        def browse_products(self):
            """Test product browsing"""
            query = """
            query GetProducts($first: Int!, $after: String, $channel: String!) {
                products(first: $first, after: $after, channel: $channel) {
                    edges {
                        node {
                            id
                            name
                            slug
                            thumbnail {
                                url
                            }
                            pricing {
                                priceRange {
                                    start {
                                        gross {
                                            amount
                                            currency
                                        }
                                    }
                                }
                            }
                        }
                    }
                    pageInfo {
                        hasNextPage
                        endCursor
                    }
                }
            }
            """
            variables = {
                'first': random.randint(10, 24),
                'channel': 'default-channel'
            }
            
            self.graphql_request(query, variables, name="Browse Products")
        
        @task(2)
        def get_product_details(self):
            """Test individual product page views"""
            # if not self.product_ids:
            #     raise RescheduleTask()
            
            product_id = random.choice(self.product_ids)
            query = """
            query GetProduct($id: ID!, $channel: String!) {
                product(id: $id, channel: $channel) {
                    id
                    name
                    description
                    slug
                    images {
                        url
                    }
                    variants {
                        id
                        name
                        sku
                        pricing {
                            price {
                                gross {
                                    amount
                                    currency
                                }
                            }
                        }
                        quantityAvailable
                    }
                    category {
                        name
                        slug
                    }
                    attributes {
                        attribute {
                            name
                            slug
                        }
                        values {
                            name
                            slug
                        }
                    }
                }
            }
            """
            variables = {'id': product_id, 'channel': 'default-channel'}
            
            self.graphql_request(query, variables, name="Product Details")
        
        @task(1)
        def browse_categories(self):
            """Test category browsing"""
            query = """
            query GetCategories($first: Int!, $channel: String!) {
                categories(first: $first) {
                    edges {
                        node {
                            id
                            name
                            slug
                            children {
                                totalCount
                            }
                            products(channel: $channel) {
                                totalCount
                            }
                        }
                    }
                }
            }
            """
            variables = {'first': 20, 'channel': 'default-channel'}
            
            self.graphql_request(query, variables, name="Browse Categories")

---

# master deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    role: locust-master
    app: locust-master
  name: locust-master
spec:
  replicas: 1
  selector:
    matchLabels:
      role: locust-master
      app: locust-master
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        role: locust-master
        app: locust-master
    spec:
      containers:
      - image: k3d-higiliqs.local:12345/locust:2.37.6
        imagePullPolicy: Always
        name: master
        args: ["--master"]
        volumeMounts:
          - mountPath: /home/locust
            name: locust-scripts
        ports:
        - containerPort: 5557
          name: comm
        - containerPort: 5558
          name: comm-plus-1
        - containerPort: 8089
          name: web-ui
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: locust-scripts
        configMap:
          name: scripts-cm

--- 

apiVersion: v1
kind: Service
metadata:
  name: locust-master
  labels:
    role: locust-master
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8089
      targetPort: 8089
      name: web-ui
    - port: 5557
      targetPort: 5557
      name: communication
    - port: 5558
      targetPort: 5558
      name: communication-plus-1
  selector:
    role: locust-master
    app: locust-master

---

# slave deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    role: locust-worker
    app: locust-worker
  name: locust-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      role: locust-worker
      app: locust-worker
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        role: locust-worker
        app: locust-worker
    spec:
      containers:
      - image: k3d-higiliqs.local:12345/locust:2.37.6
        imagePullPolicy: Always
        name: worker
        args: ["--worker", "--master-host=locust-master"]
        volumeMounts:
          - mountPath: /home/locust
            name: locust-scripts
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: locust-scripts
        configMap:
          name: scripts-cm